xmlName(rootNode)
names(rootNode)
xmlSApply(rootNode, xmlName)
xmlSApply(rootNode, xmlValue)
rootNode[[1]]
rootNode[[1]][[1]]
zipcodes <- xpathSApply(xmlFile, "//zipcode" xmlValue)
zipcodes <- xpathSApply(xmlFile, "//zipcode", xmlValue)
table(zipcodes)
z <- table(zipcodes)
names(z)
z[["21231"]]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "Idaho2006HousingData2.csv", method = "curl")
DT <- fread("Idaho2006HousingData2.csv")
library(data.table)
download.packages(data.table)
download.packages("data.table")
install.packages("data.table")
library(data.table)
DT <- fread("Idaho2006HousingData2.csv")
nrow(df2)
str(x)
sum(dat$Zip*dat$Ext,na.rm=T)
z[["21231"]]
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "HousingSurveyDataIdaho20016",method="curl")
idahoHousingData <- read.csv("HousingSurveyDataIdaho20016.csv")
idahoHousingData <- read.csv("HousingSurveyDataIdaho20016.csv")
?handle
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="AmericanCommunitySurveyData.csv", method="curl")
acs <- read.csv("AmericanCommunitySurveyData.csv")
names(acs)
head(acs)
pwgtp
View(acs)
unique(acs$AGEP)
?nchar
library(XML)
htmlFile <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternalNodes=T)
htmlFile
str(htmlFile)
names(xmlRoot(htmlFile))
library(httr)
htmlFileHttr = GET("http://biostat.jhsph.edu/~jleek/contact.html")
htmlFileContent = content(htmlFileHttr, as ="text")
str(htmlFileContent)
htmlFileContent
?strsplit
testHTML <- strsplit(htmlFileContent,"\n", fixed=TRUE)
str(testHTML)
x<-"a\nb"
x
x<-"a\\nb"
x
testHTML <- strsplit(htmlFileContent,"\n")
str(testHTML)
testHTML <- strsplit(htmlFileContent,"\n", fixed=TRUE)
testHTML
nchar(testHTML[10])
testHTML <- unlist(strsplit(htmlFileContent,"\n", fixed=TRUE))
testHTML
nchar(testHTML[10])
nchar(testHTML[20])
nchar(testHTML[30])
nchar(testHTML[100])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile = "Quiz2Q5File", method="curl")
?read.for
read.table("Quiz2Q5File", header=true)
read.table("Quiz2Q5File", header=T)
read.for("Quiz2Q5File", header=T)
forFile <- read.fortran("Quiz2Q5File", header=T)
forFile <- read.fwf("Quiz2Q5File", skip=4, widths =c(15,13,13,13,8))
head(forFile)
head(forFile$V1)
forFile$V1[1]
forFile$V2[1]
forFile$V3[1]
forFile$V4[1]
forFile$V5[1]
forFile <- read.fwf("Quiz2Q5File", skip=4, widths =c(-1,9,-4,5,4,-4,5,4,-4,5,4,-4,5,4))
head(forFile)
sum(forFile$V4)
setwd("Project")
getwd()
list.files()
rm(list=ls())
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "character"))
names(activityLabels) <- c(actID, actNm)
## Read train data into a data frame 'trainData'
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainActivityData <- read.table("", header=FALSE, sep="", colClasses="factor")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
rm(list=ls())
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "character"))
names(activityLabels) <- c(actID, actNm)
View(activityLabels)
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "character"))
names(activityLabels) <- c(actID, actNm)
## Read train data into a data frame 'trainData'
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainActivityData <- read.table("", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "character"))
names(activityLabels) <- c(actID, actNm)
## Read train data into a data frame 'trainData'
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
View(trainData)
View(trainActivityData)
View(trainActivityData)
View(activityLabels)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
View(trainActivityData)
trainData[[actNm]] <- trainActivityData[[actNm]]
View(trainData)
test <- trainData[[actNm]]
test <- trainData[,actNm]
test <- trainData$ActivityName
test <- trainData[ , ActivityName]
names(trainData)
test <- trainData[ , "ActivityName"]
test
class(trainData[[actNm]])
class(trainData[[actNm]]) <- "factor"
class(trainData[[actNm]]) <- factor
as.factor(trainData[[actNm]])
class(trainData[[actNm]])
trainData[[actNm]] <- as.factor(trainData[[actNm]])
class(trainData[[actNm]])
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "character"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
trainData[[actNm]] <- trainActivityData[[actNm]]
trainData[[actNm]] <- as.factor(trainData[[actNm]])
testData[[actNm]] <- testActivityData[[actNm]]
testData[[actNm]] <- as.factor(testData[[actNm]])
View(testActivityData)
View(trainActivityData)
View(trainData)
View(testData)
allData <- rbiind(trainData, testData)
allData <- rbind(trainData, testData)
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character")
)
View(featureLables)
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainSubjectData) <- c(subID)
subID <- "SubjectID"
names(trainSubjectData) <- c(subID)
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="integer")
names(testSubjectData) <- c(subID)
trainData[[subID]] <- trainSubjectData[[subID]]
testData[[subID]] <- testSubjectData[[subID]]
allData <- rbind(trainData, testData)
View(featureLables)
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character")
)
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
rm(test)
names(featureLables) <- c(varIndex, varNm)
View(featureLables)
test1 <- featureLables[grep("mean"), featureLables[[varNm]]]
test1 <- featureLables[grep("mean", featureLables[[varNm]]), ]
View(test1)
View(featureLables)
test1 <- featureLables[grep("mean()", featureLables[[varNm]]), ]
View(test1)
test1 <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
View(test1)
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
rm(test1)
View(featureMeanSubset)
View(featureSTDSubset)
View(featureMeanSubset)
colIndexSubset <- featureMeanSubset[ ,varIndex])
colIndexSubset <- featureMeanSubset[ ,varIndex]
colIndexSubset
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colIndexSubset
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
colNamesSubset
test <- allData[ ,colIndexSubset]
View(test)
ncol(allData)
ncol[allData] -1
ncol[allData -1
ncol(allData -1)
ncol(allData) -1
x <- c(1,2,43,4,5,6)
x[1:3]
subColIndex <- ncol[allData]
subColIndex <- ncol(allData)
actColIndex <- (ncol(allData) -1)
colIndexSubset <- c(colIndexSubset, subColIndex, actColIndex)
test <- allData[ ,colIndexSubset]
View(test)
subColName <- names(allData)[subColIndex]
subColName
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, subColName, actColName)
View(test)
names(test) <- colNamesSubset
View(test)
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
View(allTidyData)
?gl
sapply(names(allTidyData), class)
apply(names(allTidyData), class)
apply(names(allTidyData), 2, class)
names(allTidyData)
apply(allTidyData, 2, class)
sapply(allTidyData, class)
class(allTidyData$Activityname)
View(allTidyData)
allTidyData$ActivityName
class(allTidyData$ActivityName)
class(allTidyData$SubjectID)
rm(list=ls())
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData[[actNm]] <- trainActivityData[[actNm]]
trainData[[subID]] <- trainSubjectData[[subID]]
#trainData[[actNm]] <- as.factor(trainData[[actNm]])
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData[[actNm]] <- testActivityData[[actNm]]
testData[[subID]] <- testSubjectData[[subID]]
#testData[[actNm]] <- as.factor(testData[[actNm]])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
## Read features file
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
## Find the rows in features table corresponding to mean and std of measurements
## Also record the variable names
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
## Adding Activity Column and Subject Column to the subset vetors
subColIndex <- ncol(allData)
actColIndex <- (ncol(allData) -1)
colIndexSubset <- c(colIndexSubset, subColIndex, actColIndex)
subColName <- names(allData)[subColIndex]
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, subColName, actColName)
## Subset allData to include columns only with Mean and Standard Deviation of measurements
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
class(allTidyData$SubjectID)
test <- lapply(split(allTidyData, c(allTidyData[[subID]], allTidyData[[actNm]])), mean)
test
mean(allTidyData[ ,1])
rm.(list=ls())
rm(list=ls())
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
allData <- rbind(trainData, testData)
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
View(allTidyData)
rm(list=ls())
## This script aims at reading relevant data from the data files obtained from  Samsung.... etc etc.
## creating a tidy indata set from the .....
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData[[actNm]] <- trainActivityData[[actNm]]
trainData[[subID]] <- trainSubjectData[[subID]]
#trainData[[actNm]] <- as.factor(trainData[[actNm]])
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData[[actNm]] <- testActivityData[[actNm]]
testData[[subID]] <- testSubjectData[[subID]]
#testData[[actNm]] <- as.factor(testData[[actNm]])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
## Read features file
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
## Find the rows in features table corresponding to mean and std of measurements
## Also record the variable names
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
## Adding Activity Column and Subject Column to the subset vetors
subColIndex <- ncol(allData)
actColIndex <- (ncol(allData) -1)
colIndexSubset <- c(colIndexSubset, subColIndex, actColIndex)
subColName <- names(allData)[subColIndex]
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, subColName, actColName)
## Subset allData to include columns only with Mean and Standard Deviation of measurements
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
View(allTidyData)
testData <- data.frame(lapply(split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName)), mean))
View(testData)
testData = data.table(allTidyData)
library(data.table)
testData = data.table(allTidyData)
View(testData)
test <- testData[ ,names(testData)[1]:= mean(testData[ ,1]), by=list(ActivityName, SubjectID)]
View(test)
test <- split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName))
str(test)
testData <- data.frame(lapply(split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName), drop=TRUE), mean))
View(testData)
test <- split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName), drop=TRUE)
test[1]
testDF<- test[1]
testDF<- data.frame(test[1])
View(testDF)
library(data.table)
tableData <- data.table(allTidyData)
names(tableData)[1]
mean(tableData[ ,1]
)
x <- tableData[,1]
mean(x)
write.csv(allTidyData, file = "AllDataTidy1.csv",row.names=FALSE)
View(tableData)
names(tableData)[1]
tableData[ ,mean(), by=list(ActivityName, SubjectID)]
?mean
tableData[ ,mean(na.rm=TRUE), by=list(ActivityName, SubjectID)]
tableData <- data.table(allTidyData)
colName <- names(tableData)[1]
colVal <- tableData[[colName]]
tableData[ ,colName:= mean(colVal), by=list(ActivityName, SubjectID)]
view(tableData)
View(tableData)
write.csv(tableData, file = "Test.csv",row.names=FALSE)
allSplitDF <- split(allTidyData, c(allTidyData[[subID]], allTidyData[[actNm]]))
x <- allTidyData[[subID]]
x <- allTidyData[[actNm]]
length(x)
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]))
?colMeans
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]), drop =TRUE)
summaryTidyDF <- sapply(allSplitDF, colMeans())
colMeans(allSplitDF[1])
testDF <- allSplitDF[1]
testDF <- allSplitDF[[1]]
View(testDF)
colMeans(allSplitDF[[1]])
str(testDF)
View(testDF)
colMeans(allSplitDF[[1]][ ,1])
colMeans(allSplitDF[[1]][[ ,1]])
colMeans(allSplitDF[[c(1,1)]])
colMeans(allSplitDF[[c(1)]][,1])
colMeans(allSplitDF[[c(1)]])
colMeans(allSplitDF[[c(1)]][, c(1:6)])
lastMeasuredVarColIndex <- (subColIndex -2)
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:subColIndex)]))
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,1:subColIndex]))
1
1:5
c(1,5)
c(1:5)
testDF <- allSplitDF[[1]]
View(testDF)
colMeans(testDF[ ,1:2])
lastMeasuredVarColIndex
subColIndex
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,1:lastMeasuredVarColIndex]))
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex]))
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex)]))
lastMeasuredVarColIndex
c(1:lastMeasuredVarColIndex)
testDFSub <- testDF[ ,c(1:lastMeasuredVarColIndex)]
View(testDF)
testDFSub <- testDF[ ,c(1:561)]
lastMeasuredVarColIndex <- (ncol(allSplitDF) -2)
lastMeasuredVarColIndex <- (ncol(allTidyData) -2)
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]), drop =TRUE)
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex)]))
View(summaryTidyDF)
View(summaryTidyDF)
