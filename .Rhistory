varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData[[actNm]] <- trainActivityData[[actNm]]
trainData[[subID]] <- trainSubjectData[[subID]]
#trainData[[actNm]] <- as.factor(trainData[[actNm]])
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData[[actNm]] <- testActivityData[[actNm]]
testData[[subID]] <- testSubjectData[[subID]]
#testData[[actNm]] <- as.factor(testData[[actNm]])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
## Read features file
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
## Find the rows in features table corresponding to mean and std of measurements
## Also record the variable names
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
## Adding Activity Column and Subject Column to the subset vetors
subColIndex <- ncol(allData)
actColIndex <- (ncol(allData) -1)
colIndexSubset <- c(colIndexSubset, subColIndex, actColIndex)
subColName <- names(allData)[subColIndex]
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, subColName, actColName)
## Subset allData to include columns only with Mean and Standard Deviation of measurements
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
View(allTidyData)
testData <- data.frame(lapply(split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName)), mean))
View(testData)
testData = data.table(allTidyData)
library(data.table)
testData = data.table(allTidyData)
View(testData)
test <- testData[ ,names(testData)[1]:= mean(testData[ ,1]), by=list(ActivityName, SubjectID)]
View(test)
test <- split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName))
str(test)
testData <- data.frame(lapply(split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName), drop=TRUE), mean))
View(testData)
test <- split(allTidyData, list(allTidyData$SubjectID, allTidyData$ActivityName), drop=TRUE)
test[1]
testDF<- test[1]
testDF<- data.frame(test[1])
View(testDF)
library(data.table)
tableData <- data.table(allTidyData)
names(tableData)[1]
mean(tableData[ ,1]
)
x <- tableData[,1]
mean(x)
write.csv(allTidyData, file = "AllDataTidy1.csv",row.names=FALSE)
View(tableData)
names(tableData)[1]
tableData[ ,mean(), by=list(ActivityName, SubjectID)]
?mean
tableData[ ,mean(na.rm=TRUE), by=list(ActivityName, SubjectID)]
tableData <- data.table(allTidyData)
colName <- names(tableData)[1]
colVal <- tableData[[colName]]
tableData[ ,colName:= mean(colVal), by=list(ActivityName, SubjectID)]
view(tableData)
View(tableData)
write.csv(tableData, file = "Test.csv",row.names=FALSE)
allSplitDF <- split(allTidyData, c(allTidyData[[subID]], allTidyData[[actNm]]))
x <- allTidyData[[subID]]
x <- allTidyData[[actNm]]
length(x)
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]))
?colMeans
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]), drop =TRUE)
summaryTidyDF <- sapply(allSplitDF, colMeans())
colMeans(allSplitDF[1])
testDF <- allSplitDF[1]
testDF <- allSplitDF[[1]]
View(testDF)
colMeans(allSplitDF[[1]])
str(testDF)
View(testDF)
colMeans(allSplitDF[[1]][ ,1])
colMeans(allSplitDF[[1]][[ ,1]])
colMeans(allSplitDF[[c(1,1)]])
colMeans(allSplitDF[[c(1)]][,1])
colMeans(allSplitDF[[c(1)]])
colMeans(allSplitDF[[c(1)]][, c(1:6)])
lastMeasuredVarColIndex <- (subColIndex -2)
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:subColIndex)]))
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,1:subColIndex]))
1
1:5
c(1,5)
c(1:5)
testDF <- allSplitDF[[1]]
View(testDF)
colMeans(testDF[ ,1:2])
lastMeasuredVarColIndex
subColIndex
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,1:lastMeasuredVarColIndex]))
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex]))
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex)]))
lastMeasuredVarColIndex
c(1:lastMeasuredVarColIndex)
testDFSub <- testDF[ ,c(1:lastMeasuredVarColIndex)]
View(testDF)
testDFSub <- testDF[ ,c(1:561)]
lastMeasuredVarColIndex <- (ncol(allSplitDF) -2)
lastMeasuredVarColIndex <- (ncol(allTidyData) -2)
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]), drop =TRUE)
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex)]))
View(summaryTidyDF)
View(summaryTidyDF)
actID <- "ActivityID"
actNm <- "ActivityName"
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
View(activityLabels)
names(activityLabels) <- c(actID, actNm)
View(activityLabels)
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
View(trainActivityData)
names(trainActivityData) <- c(actID)
View(trainActivityData)
View(activityLabels)
View(trainActivityData)
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
View(testActivityData)
names(testActivityData) <- c(actID)
View(testActivityData)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
View(trainActivityData)
View(trainActivityData)
View(testActivityData)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
View(testActivityData)
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
View(trainSubjectData)
names(trainSubjectData) <- c(subID)
View(trainSubjectData)
subID <- "SubjectID"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
names(trainSubjectData) <- c(subID)
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
View(trainSubjectData)
View(testSubjectData)
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
View(trainActivityData)
test <- trainActivityData[[actNm]]
str(test)
View(trainData)
testDF<-cbind(trainActivityData[[actNm]], trainData)
View(testDF)
test <- trainActivityData[actNm]
View(test)
testDF<-cbind(trainActivityData[actNm], trainData)
View(testDF)
View(trainData)
trainData <- cbind(trainActivityData[actNm], trainData)
View(trainData)
ls()
rm(list=ls())
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
View(trainData)
trainData <- cbind(trainActivityData[actNm], trainSubjectData[subID], trainData)
View(trainData)
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData <- cbind(testActivityData[actNm], testSubjectData[subID], testData)
View(testData)
testDF <- testData
totNm <- "TrainOrTestData"
testDF[totNm] <- "test"
View(testDF)
select(testDF, totNm)
test2<- testDF[[totNm]]
test2<- testDF[totNm]
View(test2)
testData[totNm] <- "test"
trainData[totNm] <- "train"
names(testData)
allData <- rbind(trainData, testData)
View(testDF)
str(testDF)
testDF[totNm] <- as.factor(testDF[totNm])
testDF[[totNm]] <- as.factor(testDF[[totNm]])
str(testDF$TrainOrTestData)
allData[[totNm]] <- as.factor(allData[[totNm]])
str(allData[,564])
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
View(featureLables)
names(featureLables) <- c(varIndex, varNm)
View(featureLables)
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
View(featureMeanSubset)
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
?grep
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData <- cbind(trainData, trainActivityData[actNm], trainSubjectData[subID])
trainData[totNm] <- "train"
#trainData[[actNm]] <- as.factor(trainData[[actNm]])
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData <- cbind(testData, testActivityData[actNm], testSubjectData[subID])
testData[totNm] <- "test"
#testData[[actNm]] <- as.factor(testData[[actNm]])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
allData[[totNm]] <- as.factor(allData[[totNm]])
totColIndex <- ncol(allData)
subColIndex <- (totColIndex -1)
actColIndex <- (subColIndex -1)
#-------------------OBJECTIVE OF SCRIPT-------------------#
## This script aims at reading relevant data from the data files obtained from Human Activity Recognition database
## built from the recordings of 30 subjects performing  six different activities of daily living (ADL)
## while carrying a waist-mounted smartphone (Samsung Galaxy S II) with embedded inertial sensors
## and eventually converting it to a tidy data set with the following requirements:
##   1. The "training" and "test" datasets need to be merged
##   2. Only measurements on the mean and standard deviation of each measurement need to be extracted
## Another objective of this script is to create a second, independent tidy data set
## with the average of each variable for each activity and each subject.
## Loading relevant libraries
library(dplyr)
## Clearing wrking space
rm(list=ls())
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
totNm <- "TrainOrTestData"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData <- cbind(trainData, trainActivityData[actNm], trainSubjectData[subID])
trainData[totNm] <- "train"
#trainData[[actNm]] <- as.factor(trainData[[actNm]])
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData <- cbind(testData, testActivityData[actNm], testSubjectData[subID])
testData[totNm] <- "test"
#testData[[actNm]] <- as.factor(testData[[actNm]])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
allData[[totNm]] <- as.factor(allData[[totNm]])
## Read features file
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
## Find the rows in features table corresponding to mean and std of measurements
## Also record the variable names
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
## Adding Activity Column, Subject Column and TrainOrTestData Column to the subset vetors
totColIndex <- ncol(allData)
subColIndex <- (totColIndex -1)
actColIndex <- (subColIndex -1)
colIndexSubset <- c(colIndexSubset, actColIndex, subColIndex, totColIndex)
totColName <- names(allData)[totColIndex]
subColName <- names(allData)[subColIndex]
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, actColName, subColName, totColName)
View(allData)
## Subset allData to include columns only with Mean and Standard Deviation of measurements
allTidyData <- allData[ ,colIndexSubset]
View(allTidyData)
names(allTidyData) <- colNamesSubset
View(allTidyData)
str(allTidyData)
testDF <- allTidyData
splitTestDF <- split(testDF, list(testDF[[subID]], testDF[[actNm]]), drop =TRUE)
str(splitTestDF)
lastMeasuredVarColIndex <- (ncol(allTidyData) -3)
splitTestDF2 <- split(testDF[ ,1:lastMeasuredVarColIndex], list(testDF[subID], testDF[actNm]), drop =TRUE)
splitTestDF2 <- split(testDF[ ,1:lastMeasuredVarColIndex], list(testDF[[subID]], testDF[[actNm]]), drop =TRUE)
str(splitTestDF2)
x1 <- sapply(splitTestDF, colMeans())
x1 <- sapply(splitTestDF2, colMeans())
?colMeans
str(splitTestDF[1])
str(unlist(splitTestDF[1])
)
x<- unlist(splitTestDF2[1]))
x<- unlist(splitTestDF2[1])
str(x)
str(splitTestDF2[[1]])
x1 <- sapply(splitTestDF2, colMeans())
x <- sapply(splitTestDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex)]))
View(x)
write.csv(allTidyData, file = "checkAns.csv")
View(x)
str(x)
?dcast
library(reshape2)
?dcast
#-------------------OBJECTIVE OF SCRIPT-------------------#
## This script aims at reading relevant data from the data files obtained from Human Activity Recognition database
## built from the recordings of 30 subjects performing  six different activities of daily living (ADL)
## while carrying a waist-mounted smartphone (Samsung Galaxy S II) with embedded inertial sensors
## and eventually converting it to a tidy data set with the following requirements:
##   1. The "training" and "test" datasets need to be merged
##   2. Only measurements on the mean and standard deviation of each measurement need to be extracted
## Another objective of this script is to create a second, independent tidy data set
## with the average of each variable for each activity and each subject.
## Loading relevant libraries
library(dplyr)
library(reshape2)
## Clearing wrking space
rm(list=ls())
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
totNm <- "TrainOrTestData"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
names(testActivityData) <- c(actID)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData <- cbind(trainData, trainActivityData[actNm], trainSubjectData[subID])
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData <- cbind(testData, testActivityData[actNm], testSubjectData[subID])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
## Read features file
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
## Find the rows in features table corresponding to mean and std of measurements
## Also record the variable names
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
## Adding Activity Column, Subject Column and TrainOrTestData Column to the subset vetors
subColIndex <- ncol(allData)
actColIndex <- (subColIndex -1)
colIndexSubset <- c(colIndexSubset, actColIndex, subColIndex)
subColName <- names(allData)[subColIndex]
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, actColName, subColName)
## Subset allData to include columns only with Mean and Standard Deviation of measurements
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
lastMeasuredVarColIndex <- (ncol(allTidyData) -2)
dataMelt <- melt(allTidyData, id = c(actColName, subColName, totColName))
dataMelt <- melt(allTidyData, id = c(actColName, subColName))
View(dataMelt)
meanTable <- dcast(dataMelt, actColName + subColName ~ variable, mean)
View(meanTable)
meanTable <- dcast(dataMelt, ActivityName + SubjectID ~ variable, mean)
View(meanTable)
allSplitDF <- split(allTidyData, list(allTidyData[[subID]], allTidyData[[actNm]]), drop =TRUE)
summaryTidyDF <- sapply(allSplitDF, function(x) colMeans(x[ ,c(1:lastMeasuredVarColIndex)]))
View(summaryTidyDF)
write.table(meanTable, file = "MeanOfAllVariablesBySubjectByActivity.txt", sep = "," , row.names = FALSE)
View(trainActivityData)
summary(meanTable)
View(meanTable)
library(dplyr)
library(reshape2)
## Clearing wrking space
rm(list=ls())
## Defining constants to be used later in the script here
actID <- "ActivityID"
actNm <- "ActivityName"
varIndex <- "FeatureIndex"
varNm <- "FeatureName"
subID <- "SubjectID"
## Reading activity label table
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header=FALSE, sep="", colClasses=c("integer", "factor"))
names(activityLabels) <- c(actID, actNm)
## Reading Train Activity Data
trainActivityData <- read.table("UCI HAR Dataset/train/y_train.txt", header=FALSE, sep="", colClasses="integer")
names(trainActivityData) <- c(actID)
View(activityLabels)
View(trainActivityData)
trainActivityData <- merge(trainActivityData, activityLabels, by = actID)
View(trainActivityData)
## Reading Test Activity Data
testActivityData <- read.table("UCI HAR Dataset/test/y_test.txt", header=FALSE, sep="", colClasses="integer")
View(testActivityData)
names(testActivityData) <- c(actID)
View(testActivityData)
testActivityData <- merge(testActivityData, activityLabels, by = actID)
## Reading Subject Data for train
trainSubjectData <- read.table("UCI HAR Dataset/train/subject_train.txt", header=FALSE, sep="", colClasses="factor")
names(trainSubjectData) <- c(subID)
## Reading Subject Data for test
testSubjectData <- read.table("UCI HAR Dataset/test/subject_test.txt", header=FALSE, sep="", colClasses="factor")
names(testSubjectData) <- c(subID)
View(testSubjectData)
View(trainSubjectData)
View(testSubjectData)
## Read train data into a data frame 'trainData' and merging activity data
trainData <- read.table("UCI HAR Dataset/train/X_train.txt", header =FALSE, sep="", colClasses = "numeric")
trainData <- cbind(trainData, trainActivityData[actNm], trainSubjectData[subID])
View(trainData)
## Read test data into a data frame 'testData' and merging activity data
testData <- read.table("UCI HAR Dataset/test/X_test.txt", header =FALSE, sep="", colClasses = "numeric")
testData <- cbind(testData, testActivityData[actNm], testSubjectData[subID])
## Merging test and train data into a data frame called allData
allData <- rbind(trainData, testData)
View(allData)
## Read features file
featureLables <- read.table("UCI HAR Dataset/features.txt", header =FALSE, sep="", colClasses = c("numeric", "character"))
names(featureLables) <- c(varIndex, varNm)
View(featureLables)
## Find the rows in features table corresponding to mean and std of measurements
## Also record the variable names
featureMeanSubset <- featureLables[grep("mean()", featureLables[[varNm]], fixed=TRUE), ]
featureSTDSubset <- featureLables[grep("std()", featureLables[[varNm]], fixed=TRUE), ]
colIndexSubset <- c(featureMeanSubset[ ,varIndex], featureSTDSubset[ ,varIndex])
colNamesSubset <- c(featureMeanSubset[ ,varNm], featureSTDSubset[ ,varNm])
## Adding Activity Column, Subject Column and TrainOrTestData Column to the subset vetors
subColIndex <- ncol(allData)
actColIndex <- (subColIndex -1)
colIndexSubset <- c(colIndexSubset, actColIndex, subColIndex)
subColName <- names(allData)[subColIndex]
actColName <- names(allData)[actColIndex]
colNamesSubset <- c(colNamesSubset, actColName, subColName)
## Subset allData to include columns only with Mean and Standard Deviation of measurements
allTidyData <- allData[ ,colIndexSubset]
names(allTidyData) <- colNamesSubset
View(allTidyData)
## Finding out the mean of all relevant variables for each activitya and subjectID combination
dataMelt <- melt(allTidyData, id = c(actColName, subColName))
meanTable <- dcast(dataMelt, ActivityName + SubjectID ~ variable, mean)
# Writing out the mean output file as a text file
write.table(meanTable, file = "MeanOfAllVariablesBySubjectByActivity.txt", sep = "," , row.names = FALSE)
